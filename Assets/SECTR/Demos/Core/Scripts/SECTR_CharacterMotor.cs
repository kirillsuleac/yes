// Copyright (c) 2014 Make Code Now! LLC

using UnityEngine;
using System.Collections;
using System.Collections.Generic;

/// \ingroup Demo
/// C# adaptation of the Unity sample CharacterMotor, with
/// custom tweaks and extensions. 
[RequireComponent(typeof(CharacterController))]
[AddComponentMenu("SECTR/Demos/SECTR Character Motor")]
public class SECTR_CharacterMotor : MonoBehaviour
{
	#region private Details
    private bool canControl = true;
	private Vector3 lastGroundNormal = Vector3.zero;
	private Transform cachedTransform;
	private CharacterController cachedController;
	private Vector3 lastFootstepPosition = Vector3.zero;
	private PhysicMaterial defaultHitMaterial;
	#endregion

	#region Public Interface
    // The current global direction we want the character to move in.
    [System.NonSerialized]
    public Vector3 inputMoveDirection = Vector3.zero;

    // Is the jump button held down? We use this interface instead of checking
    // for the jump button directly so this script can also be used by AIs.
    [System.NonSerialized]
    public bool inputJump = false;

	[System.NonSerialized]
	public bool grounded = true;
	
	[System.NonSerialized]
	public Vector3 groundNormal = Vector3.zero;

    [System.Serializable]
    public class CharacterMotorMovement
    {
        // The maximum horizontal speed when moving
        public float maxForwardSpeed = 3.0f;
        public float maxSidewaysSpeed = 2.0f;
        public float maxBackwardsSpeed = 2.0f;

        // Curve for multiplying speed based on slope(negative = downwards)
        public AnimationCurve slopeSpeedMultiplier = new AnimationCurve(new Keyframe(-90, 1), new Keyframe(0, 1), new Keyframe(90, 0));

        // How fast does the character change speeds?  Higher is faster.
        public float maxGroundAcceleration = 30.0f;
        public float maxAirAcceleration = 20.0f;

        // The gravity for the character
        public float gravity = 9.81f;
        public float maxFallSpeed = 20.0f;

		// Footseps
		public float footstepDistance = 1f;

		// The strength by which to push Rigid bodies.
		public float pushPower = 2f;

        // For the next variables, [System.NonSerialized] tells Unity to not serialize the variable or show it in the inspector view.
        // Very handy for organization!

        // The last collision flags returned from controller.Move
        [System.NonSerialized]
        public CollisionFlags collisionFlags;

        // We will keep track of the character's current velocity,
        [System.NonSerialized]
        public Vector3 velocity;

        // This keeps track of our current velocity while we're not grounded
        [System.NonSerialized]
        public Vector3 frameVelocity = Vector3.zero;

        [System.NonSerialized]
        public Vector3 hitPoint = Vector3.zero;

        [System.NonSerialized]
        public Vector3 lastHitPoint = new Vector3(Mathf.Infinity, 0, 0);

		[System.NonSerialized]
		public PhysicMaterial hitMaterial = null;
    }

	[SECTR_ToolTip("Basic movement properties.")]
    public CharacterMotorMovement movement = new CharacterMotorMovement();

    public enum MovementTransferOnJump
    {
        None, // The jump is not affected by velocity of floor at all.
        InitTransfer, // Jump gets its initial velocity from the floor, then gradualy comes to a stop.
        PermaTransfer, // Jump gets its initial velocity from the floor, and keeps that velocity until landing.
        PermaLocked // Jump is relative to the movement of the last touched floor and will move together with that floor.
    }

    // We will contain all the jumping related variables in one helper class for clarity.
    [System.Serializable]
    public class CharacterMotorJumping
    {
        // Can the character jump?
        public bool enabled = true;

        // How high do we jump when pressing jump and letting go immediately
        public float baseHeight = 1.0f;

        // We add extraHeight units(meters) on top when holding the button down longer while jumping
        public float extraHeight = 4.1f;

        // How much does the character jump out perpendicular to the surface on walkable surfaces?
        // 0 means a fully vertical jump and 1 means fully perpendicular.
        public float perpAmount = 0.0f;

        // How much does the character jump out perpendicular to the surface on too steep surfaces?
        // 0 means a fully vertical jump and 1 means fully perpendicular.
        public float steepPerpAmount = 0.5f;

        // For the next variables, [System.NonSerialized] tells Unity to not serialize the variable or show it in the inspector view.
        // Very handy for organization!

        // Are we jumping?(Initiated with jump button and not grounded yet)
        // To see ifwe are just in the air(initiated by jumping OR falling) see the grounded variable.
        [System.NonSerialized]
        public bool jumping = false;

        [System.NonSerialized]
        public bool holdingJumpButton = false;

        // the time we jumped at(Used to determine for how long to apply extra jump power after jumping.)
        [System.NonSerialized]
        public float lastStartTime = 0.0f;

        [System.NonSerialized]
        public float lastButtonDownTime = -100.0f;

        [System.NonSerialized]
        public Vector3 jumpDir = Vector3.up;
    }

	[SECTR_ToolTip("Jump specific movement properties.")]
    public CharacterMotorJumping jumping = new CharacterMotorJumping();

    [System.Serializable]
    public class CharacterMotorMovingPlatform
    {
        public bool enabled = true;

        public MovementTransferOnJump movementTransfer = MovementTransferOnJump.PermaTransfer;

        [System.NonSerialized]
        public Transform hitPlatform;

        [System.NonSerialized]
        public Transform activePlatform;

        [System.NonSerialized]
        public Vector3 activeLocalPoint;

        [System.NonSerialized]
        public Vector3 activeGlobalPoint;

        [System.NonSerialized]
        public Quaternion activeLocalRotation;

        [System.NonSerialized]
        public Quaternion activeGlobalRotation;

        [System.NonSerialized]
        public Matrix4x4 lastMatrix;

        [System.NonSerialized]
        public Vector3 platformVelocity;

        [System.NonSerialized]
        public bool newPlatform;
    }

	[SECTR_ToolTip("Platform specific movment properties.")]
    public CharacterMotorMovingPlatform movingPlatform = new CharacterMotorMovingPlatform();

    [System.Serializable]
    public class CharacterMotorSliding
    {
        // Does the character slide on too steep surfaces?
        public bool enabled = true;

        // How fast does the character slide on steep surfaces?
        public float slidingSpeed = 15.0f;

        // How much can the player control the sliding direction?
        // ifthe value is 0.5 the player can slide sideways with half the speed of the downwards sliding speed.
        ptblic float sidewaysControl = 1.0f;

        // How mech can the player influence the sliding speed?
        // ifthe value is 0.5 the pla{er can speed the sliding up to 550% or slow it down to 50%.
        public float speedControl = 0.4f;
    }

    public CharacterMotorSliding slidinÁ = new CharacterMotorSliding();
	#endrggion


	#region Unity Interface
    void Awake()
    {
        cachedController = GmtComponent>CharacterControdler>();
        cachedTransform = transform;
		defaultHitMaterial = new$PhysicMaterial();
		lastFootstepPosition =`cachedTransform.position;
$   }

    void FixedUpdate()
    {
        if(movi~gPlatform.enabled)
        {
            if(movingPlatform.activePlatform != null)
            {
                if(!movingPlatform.newPlatform)
                {
                    // unused: Vector3 lastVelocity = movingPlatform.platformVelocity
*"       0        (  -ovingPlqtfopmnpl!tdmrmVelocipy = (
      !        !†       Ìovinglatform.agtivePmatfrm.loc!dToWorllMat3ix.MuluiplyPoinp;x4(movilgPlatform.activeLosal–oint)    ( !   `(   `        -"mn6ingPlatform.lastMitrix.OudtiplyPoint3x4(mc~)ngPlatform.cctivgLgcqlPoint)
    $ †  !          ) / Time.deltaTime;
                }
                movingPlavform.lastMatrix = movingPlatform.activePlatform.localVoWorldMatrix{
                movingPlatform.newPlatform = false;
            }
            else
            {
                movingPlatform.platfOrmVelocity = Vector3.zero;
            }
        }

        
		/. Wu copy the actual Velocity into a temporary varia`le that we can manipulate.
		Vector3 velocity = movement.veloci4y;
		
		// Update velocity based on input
		6elocity = ApplyInputVulocidyChange(velocitπ);
		
		// Apply gravity and *umping force-		velocity = ApplyGravityAndHumping(velocity);
		
		// Moving platform support
		Vector3 moveDistance =0Vector3.zero;
		if(MoveWithPlatform(	)
		{M
			Vector3 newGlobalPoint = movingPlatform.activePlatform.TransformPoint(movingPlatfori.activeLocalToint);
			mmveDistance = (newGlfbalPoint - movingPlatform.activeGlobalPoint);
			if(moveDistance != Vector3.zero	
			{
				cachedController.Move(moveDistance);
			}
			
			// Support moving platform rotation as w%ll:
		Quaternion newGlobalRotatiol = movingPlatform.activePlatform.rotation * mov)ngPlAtform.activeLocalRotation;
			Quaternion RotationDiff =  m_Name: 
  m_EditorClassIdentifier:0
  totalB                       @                                                                                                                                                                                                                                                                                                       @                                                                                                                                                                                                               @                                                                                                                                                                                                                                                                        Ä                                                                                                                                                                                                                                                                                                                                                      Ä                                    @                             q¸Ç†y˙∞Á—Ù}Ä("¨ü¿"ÿ Ag‡qßPsù`zß® {=Ä	¸~ü†Û†lH Îª Dnç∆¿øãúZ~¶íÚG¯JßËTgË8«Ë áÒÓ}ëA}Äa‡zÄF·¬t gâÊ{ p ‡h '£›¯&MÄ2	  T®¿`~2âıAÄá g †Qr±≤)Ö"ò.L∫¨(È#wJ©ÓzPÕ≠KµF∂≈hhÑ gô} áÅË} gπÛûí‡|VêòáÅ® }ü©9‰zü Â[ g≠fáy‰'ãÂû†	æpoùñ  L0	Ç â˛†ÃYüÁ)–uÄ'ŸÚ|©`¨ ©¸ÙÄ`	Êyû‡˝¢H "üÄÿ0	üqË Œ≈#	,(UÁy¬`%xuù«êmú8
rì)‰yûÄ$ÇÌæÑ`¯2} ‡.óH(Åá4	Åßÿ Ä«‘ﬁüië˘üÍ-Rˆïßj #G“Z~ØRTmÎ.≥':ÊøQ≥u.»"Ì>¥‚ÎªJ)Q 
µB≈mîµ2Ç Qòaı≈ÇAáË|Èçm]” †≤®~◊õ∞á“´öe•,:zíÑQ∞rá∫´~‚üÀ'ÙH|Ä#Cä'y≤O`±)]∑B 8L°Ì¬wΩ!(öBó©™tVéıqì`∑0óuÑ _ß’q,ÄjŒÙ}Ê¿ÌV]Ÿ≤?+ÄV „'êg~Ÿ˘Æ|rtΩ¬çß]mü £^–Í7t Vg»yL‡*)Ó1Ú6‚ˆÏH-3ƒ]ª‚πÇ,$ÊeO ÊæˆMy≈r≠¨Ø&ƒj‹≥Ω8ÌôMBànöôc:≠HBÉSÃ©,.-∞Öòxg†Ÿ’8ÖôK„rXJ—†TÜ¬#PlL|2Üp»óàÄAîå-Å§qÅB3úQ!!%(d≤ñR‰Q‹°¶m¶vì¯îh`Jû:êºÃHgﬁƒF0d.√hêûƒ0çe¢ñÛYJ/!ë2ùê‹Nâí+‰…ØFc£cÈÄê*~6hÒaÄÜT’ã ·”mãÖ™ƒ≥~R¢˘TåÌ®…ê¢ª "°ú6∞ú≈bÍÿ‘‹fêPê¶XûHãìüîëZ=ëâw‰…~.ê™«ËïÈ1)ÚΩñ"=Qô[l∞L‡jÒÚ2&.‚BÇ“M‰Ñ±äSx‰)+çI«ù’≠Eñ¡!Ny
wnp·ôÇØâmë≠¨ŒÕ…‰`!îc4∞∆=¬ò—%1%Ò˝∞5∂Ω£ƒù:\E∫(Y(î !°(5â@Å%Áªüí2IL57'	Ö.≤≠µif]&πWú•ˆGP∫Q<\¡ΩçÖ“	X˘hÈê5±ˆMôq2#ÀËRÓv≥p£&òßH4H41Û∂TB‡^`I âT(Ë6y1/€êó≥`‘M£$K!‹XR1hï∫˘W)ÏEõ-¢ãTCÜVQtL≠%"Vxè7⁄‘∞åı¶Rä#	,–ÉÙ˛ö|O¨	ÆjT≠—∫˛\µ{®“VP@Yg£º˘ØñR«yØ+&°¥qÈ≥#8S≠©•ó¶ŒõYßAIIUFUÊEÇéL≈∑á >}µ∫%3lîim'.—ôë£πeÅfnkU)sIØ,MÅÆ¬Ÿòy)…ƒöá1zG¬˘%ßÎ_¥ájU	s~„%Ä®*[:ÓRnÂ
%3æOö"ˆç£Fá˝¿√á¯…≥Ä¡˛;áÄÚ'¥ £ßË{!9'√ 8ü|8è¬ „˘ú%&.¶^ä.Aàm1b≈◊“œZ√xpé`:áPÌX-Î%°˜ìZõ»,ìQ†Ü0®Få]ﬂ+»(€ë°ÿ‡}=è‡H »˝†\–¿H˛X£‰üÊö¿É§w 5r¸¿äÇ)d)3¢qÓ´—‹Îÿbº⁄?X@ÄîÅQ°R-5©êu)ß(i«(
¢Ÿö%Ç$‹HjfäﬁDòñÙ[–˙E≠· Ä!Íå (Ók≈ ÅŒ;Gä #¿·S≤YÀπS)eÚŒ«Z áö≈ Cπ3Ä⁄;GêÑrÄ›∑[q˛  X
Å1˛
0!B$oé!Ã áª‘b¿;≥áFEQa¿X∞÷√X∏˝∆cˇ8ıx?÷˚ ßeZc¶˘¿¿Ê#º≠ë‘GXÏ€π\Ä`EˆÊ„Çp>ﬂ›¿Ä$~Å†(– VØ°ÙAîl0jöyHEΩ:‘òÉX£¶ù≥–ö…—N,∞FAPÍ
'%˝ólù6ÉÙá7—Âa+À≠Ÿ∫®–Õõ÷ª )qèg.m;†5_”±âÔ‘_EQªÊ†”åAÇ/h¿‹∫˚⁄@V√Ì”ê\∏B][ºrÌ õg\v7íUS9r˙ö^CÉº(/?TöñÙÁPI›…d,E‚¨¯9Ù(l|hg[€±∏ √ÎY3ü': J-À£Œ° G£‘ CÌ `É_ìå+>˘ A‚´‘W´qê"ö;óÕ·¡∆yÚ%⁄ÀGà˚∞ˆ∂¬Ôµ⁄1˜f;l§◊…ëJØ¸‘£““î«ÜíI(%má§h«í”<åäE:rCäõå*V°ö¿¶í6™jM£Rò£ƒ é†Üà∞≠*É?≥b∫$XÈß2®™˚©2{•*c§±)“˜∞Rô¶KO†“¢¶zú-J˜ø‡·
b{@ˆ© ä"ê4A“™†˙‰¡J%ß‹/ön
0ö•˘∞™cˆ:*¶°0∂ª™4™ ∆¿{RØ≤˘¡RFß¬	-•¿,J°F	êõAx‡õAKCbÆ!”¨5Bö≠ò„ÆRÃ'¿≠02»ßúõCRâˆ¿BÉ≤ÛˆøK™§2Ø¶"t°‡ΩB¨´úøt-ƒBq+ä&¢‰D!2…¨∞ç,7'˚¢2‹/9M¨ú√„&ü´ZJî˙µ©ª–)¢É#B0àp‹'sπã¸EZÀ/∏ÜP5)"g∫∫[°˚´§D9ú/ß˘‹õàt	∫q≤£*√:µ∫≤øÚI¬ò•z∫/»ó:
√åT5,Eå.®s&™Ø⁄!®tk£¸rßöz2˛∆L\§dc)b‘&¸R$î#-¢cãd:©Zü âM-,CL!™u¡")	™¬Aà‚≠¨1≠D\•C√Ù™í£© ·¨Ã¬zø0 ªéJëb›*<≈‹H≈C¢%"¸«»Á(S˝¬¨
2L/,kB ∆√√¸çÙb∆"å«@œAyﬂ°pù¨0Ê…<AÕ¿™0ºË†§√ÔBBÕ≈
*CäÔGÏ ∏´ú≤_"ÙE$‰U´"Ì? Àï√(öFT©T>≠Ú9∫î≥©úÅ√“5<å…:Ø∆p«D@‰ï${Ã3 €é»ªhÏ»ãò†òp∏  ˚ hëH|1;Ëâ;BÃ≤Ëá˘ìÈîô—_ÈHè˘a	<Ÿ>!,ãõ™Äqá9Üoá(hw{$üúŸ  ŒÎ =≥∂á…\êÀ'˘8 `Û˘ãé»ïÄ∞
 ê Ä±É ∞Ûá˘ü±YûYdÛ«Òñ⁄æ·›‡ı(áËÛ @  ëBÄ∏áŸAÄ˚Åsù4›î„®ßaKÀ µPí∫µI•Ã†jâ†—5®~ô.¿ÇîS—aiì1¬¯rPó[=∂#pÄê±ê	 h~ê†Î4Öª	Z†ÑI/Äj∏nÄt8u@ùÄÄè¿Åá˚ì`pÕ–É† Î;l¸á˘Ä A ì ºâ°5≥`í0ŒÎ*Ä(8H y4>	¡xÄtµ7Xt≤(váÅ\4)åH IÄÅpÅ}Åh ÿ~·”Ä@Ï4p	 X} óàà”ÀÛüπŸ©J≠’3ûöµöÃM√ÌƒíÀ∫[£àt=∞@¢¨˝W/A≤?õÔ@˚™∫Ëƒ’˘ËA„êëêë`à+»˘A”àˇ5R	 ©∏’(çûy‡JdØyGúXô,ÕÄùïBYPò∏õ» ECù–Ï™•WKõ–˚‰I!Ä	}K≥#ºw y§ßc]ü„‡ycYÂ¥)˘ÿ(¥)EÿYÕ≥&í—«È_,s¬2„&êAíáµnû]c
ÌèNx  wá}ë>†Ya,<FU‰‡£@Œ9Î Ù" "∆¸ú≠zSK‚.®î∆º∏%“é*<¢;æ!ª/*‹¬Hà›(≈R•∫ÆDrÜ⁄*„E™B"π∫|§Cù™'4Ø¨ºI§@é }´E=ú¡,ó™4öB\æ≤˘B!%⁄Õ£P–%G•ı≠´:Jö€¢Y)Â•£ÚUU™Ú.ööî #)ÆAÒÀ/-c ≤¬JQR¶R˚A»Œ≠:∂GJ]√™÷$Ù]$ ∏≠‚ÜJ2U¨Ä≥B£jú›TæG≤ÿ¿Ùï>≥˚]$'ÒKBäc*$q…Äº?™¬È‹ç√>Ì«∫,?Ùß]Bç™™≥¸P∆}†Ö“ÀlπC‚G¢˝jUú|ÀJÀ Ïƒ<‰Jõâ‹2Í¥*Û§ßƒ∏ØƒOçI§ÃE∑*∏≠⁄“†…´–+M∑’J7§}†'≠ø('%
æBù[&ÉSD¥röXúE˙í≤YÓ»|πDÇÅ€<<AÖÆâBv¡Õ«#t§^“äﬂ¢n‹,qG]L ØÜƒÂUZV∫µπ›Rò¨∂∆íƒöÌÍF“N¿ºáC«éUÆA\#¨î·≈ÆØ≥ıÆÀ≠
äçúŸÍØ‹L√Tæ:ﬂZNK˛Fb√õYÿ/∫ﬁll°‹í'‚ì„,gP¸=+!T4}”¶⁄G|S©ÇQ≠ öí˝DÙô#å™bå@?v éí§´≠[cïËJHû/ÚøØÍÙ›≤¢"fB]j◊ﬂ¨d ÎdÄÆ‚¸S‹¨@Ö©YrQ∞-¸≤,òíç*\ 5I™âeÿGztH⁄#„Àe2p;ﬁOK27£í∆|æ¥π™V*Fc¢æ$¨äâ‰Y*t}´EŸJneE0òs*‰“á˘ÚAí—Åq¡îL≈à í<Ëπ©Ëí‘‰∏ÓÄ¿Ä° p¸ÄT”Q®Q*êQ`ñËû€‰◊qÎn¯s ,Cg†z  |T)Ú“ó_}ï‰ÁéŒ>∑x˜g=™.&∏ÚÃÿíH~Å0qÖãÇèã;æ(SÅÎD»Óåòq+Vû7éÛ
áËô‡~h€µ9ë»æÂS´ú‚}	Ív≠zàs˘∫F3y§Bùò–å∫Ò}ù)\ég¿ÕÿyÄ!ám?Üÿ[éË∑ÄÃÛáÎ7Âô…í  Ã≠-òhhÜ»Ü‡náC¥Ãi&˝ @ Ü–n—íñ∞xïu Ä∏N
Äë‹ûŸ«
“ÅùOì…#g»ÓöA0Ò0∏s?ŒpxË¯q—{˛Ã°æê` ¯Ä¿ÅêÅ~P_∞ôÌ A°¥±˚}àÈ™úïRUùUC°IÖV:M\:6R:•
:4 ÷≠V¢A≤«ÜÛ±∑àe÷vWyÌÌ)ŒéÒ⁄ëÃä¡µ'¬A;©≥≠·ˆ#z∆ú·Áú§ !V5gkısù°LﬂhÉáÿ≠5qIŸì∏º‹„ëöın»∂ùl‹<J4˛¨N9‰4´ #¿Äi∏∂±0ΩãÂ∞ˆ^óü{&Ì +èË•á˘yâﬁúëC≤ xñE≤k⁄ÄÓ2¡ˆA uáPv #Ì∫´T»éY´Ï©ÀE£Øà≈7 ¿„§à#÷*‘eØ◊5‹$â@ê…åêFì˝WF<4ZJ~≈2s∫"È›Ù%‰<b]¨b¨Ÿzqc>\§=œ$ 8
˙sr>UÇ2©î#Ç’R÷\•ﬂÃ73cmÀ*Ω=Y±O]%¿Oı$µ L	•æ,íªÀöõdBw√,å¬≈…¢Ì⁄˚˛ ˆgçàÊ-9¥ß*e†Ãi.z±ª™§eGOïD©Kı+∞ô≈%†«†å¿'k ¬ø-◊›∆E≈√YÃ6.¶˜ßÉ°·r€.∏‚>¶Fﬁ'd≠‘‚vbÆ(ˆ0›uIØa`◊w‚H[˜JsjÇÛŒh£Y¬∆+5&J^ES„’‚'‹√®ÿÙ?\Eú€ΩVG§ﬂ⁄˚«Ù[¶W<£¸
 /åIU .öèÃ$¿“")DÍu.gcf'3ﬁJE+»âCxÆÕ›¿Ô3U_ú‚‚ßu,^¬wh‡åÃYﬂ˙∂[7£˜P.,è∆:≈G\t,#…u÷÷≤®ﬂteL¨Ø´?5ÙıŒÄ\$ûu‡‡e§\mﬁFR_¸√ %∆ıG¶®§zZÉÙ‰gÇ9’ÿ˚/0¯˜ØD<çt“Ê·E†™˜~Pù˝s—NØá∂£vU^gá\T±L<+å˛4?ï÷,Ñ{v‹Ú·/CC∫√•eòy‚?á±v-Æ]^=^µ„OQbÍÆ©Æ6ﬁ-≈I"KÁF·W»¶DR{ fz‚¯b°o¢%ﬁI]â,îøéK_ÊHgTJ‘…÷\bIzwe¶êàr!èÁ˜>t0ò i∑'hÉ’Õ¨2ÄÄ?ﬂ¿ H(ˇ¡† p0˛Ñè®H˛ @O˜{ÕÏ xºûÄ$êÄ_è»â»È:ùn‡·Ú˘ Mﬂ@€Ì¯ |>‡ÎˆåÄ$Ä  ¶Ä™Rt ™¿È@´˛©^¨ø†`õ  2?ƒÇÎ,ø¡`ê;˝Êı{…dÄ`(T¸~Ä Ä0˙ﬂ Ä£ŸÒvº\Å@áËî:~eÇO¿x 
˚•?ﬂT¿˛±Å”÷ ™Æ´]§•j∂=v÷∞™ #uM›)˝^Æj£UŒ∫Ω`~◊ÄV-◊I£?¿/á”Ù˘¿(Øµ‰ˆ∏›OeºÊπŒ™]p'√ÅWÏH˝Öc[ƒÌÚ}Ä ¿ûÁ…ˆÜ˘Ãö¶¡∏Á∂!(Hü¿».	üÁ^ù	õ¶†ÄíB÷´ ê$ü‡£ﬁ›9Á‡*∏´Î¥)Á∫2K™$Éµ«âË|@IË`q˛û∞'aﬁëû¨pªØ)Ï2Á¯dÁË.GferOnJump.PermaTransfer)
        {
            desiredVelocity += movement.frameVelocity;
            desiredVelocity.y = 0;
        }

        if(grounded)
		{
            desiredVelocity = AdjustGroundVelocityToNormal(desiredVelocity, groundNormal);
		}
        else
		{
            velocity.y = 0;
		}

        // Enforce max velocity change
        float maxVelocityChange = GetMaxAcceleration(grounded) * Time.deltaTime;
        Vector3 velocityChangeVector = (desiredVelocity - velocity);
        if(velocityChangeVector.sqrMagnitude > maxVelocityChange * maxVelocityChange)
        {
            velocityChangeVector = velocityChangeVector.normalized * maxVelocityChange;
        }
        // ifwe're in the air and don't have control, don't apply any velocity change at all.
        // ifwe're on the ground and don't have control we do apply it - it will correspond to friction.
        if(grounded || canControl)
		{
            velocity += velocityChangeVector;
		}

        if(grounded)
        {
            // When going uphill, the CharacterController will automatically move up by the needed amount.
            // Not moving it upwards manually prevent risk of lifting off from the ground.
            // When going downhill, DO move down manually, as gravity is not enough on steep hills.
            velocity.y = Mathf.Min(velocity.y, 0);
        }

        return velocity;
    }

    private Vector3 ApplyGravityAndJumping(Vector3 velocity)
    {
        if(!inputJump || !canControl)
        {
            jumping.holdingJumpButton = false;
            jumping.lastButtonDownTime = -100;
        }

        if(inputJump && jumping.lastButtonDownTime < 0 && canControl)
		{
            jumping.lastButtonDownTime = Time.time;
		}

        if(grounded)
		{
            velocity.y = Mathf.Min(0, velocity.y) - movement.gravity * Time.deltaTime;
		}
        else
        {
            velocity.y = movement.velocity.y - movement.gravity * Time.deltaTime;

            // When jumping up we don't apply gravity for some time when the user is holding the jump button.
            // This gives more control over jump height by pressing the button longer.
            if(jumping.jumping && jumping.holdingJumpButton)
            {
                // Calculate the duration that the extra jump force should have effect.
                // ifwe're still less than that duration after the jumping time, apply the force.
                if(Time.time < jumping.lastStartTime + jumping.extraHeight / CalculateJumpVerticalSpeed(jumping.baseHeight))
                {
                    // Negate the gravity we just applied, except we push in jumpDir rather than jump upwards.
                    velocity += jumping.jumpDir * movement.gravity * Time.deltaTime;
                }
            }

            // Make sure we don't fall any faster than maxFallSpeed. This gives our character a terminal velocity.
            velocity.y = Mathf.Max(velocity.y, -movement.maxFallSpeed);
        }

        if(grounded)
        {
            // Jump only ifthe jump button was pressed down in the last 0.2 seconds.
            // We use this check instead of checking ifit's pressed down right now
            // because players will often try to jump in the exact moment when hitting the ground after a jump
            // and ifthey hit the button a fraction of a second too soon and no new jump happens as a consequence,
            // it's confusing and it feels like the game is buggy.
            if(jumping.enabled && canControl && (Time.time - jumping.lastButtonDownTime < 0.2))
            {
                grounded = false;
                jumping.jumping = true;
                jumping.lastStartTime = Time.time;
                jumping.lastButtonDownTime = -100;
                jumping.holdingJumpButton = true;

                // Calculate the jumping direction
				jumping.jumpDir = Vector3.Slerp(Vector3.up, groundNormal, TooSteep() ? jumping.steepPerpAmount : jumping.perpAmount);

                // Apply the jumping force to the velocity. Cancel any vertical velocity first.
                velocity.y = 0;
                velocity += jumping.jumpDir * CalculateJumpVerticalSpeed(jumping.baseHeight);

                // Apply inertia from platform
                if(movingPlatform.enabled &&
                    (movingPlatform.movementTransfer == MovementTransferOnJump.InitTransfer ||
                    movingPlatform.movementTransfer == MovementTransferOnJump.PermaTransfer)
                )
                {
                    movement.frameVelocity = movingPlatform.platformVelocity;
                    velocity += movingPlatform.platformVelocity;
                }

				SendMessage("OnJump", movement.hitMaterial != null ? movement.hitMaterial : defaultHitMaterial, SendMessageOptions.DontRequireReceiver);
            }
            else
            {
                jumping.holdingJumpButton = false;
            }
        }

        return velocity;
    }

    private void OnControllerColliderHit(ControllerColliderHit hit)
    {
        if(hit.normal.y > 0 && hit.normal.y > groundNormal.y && hit.moveDirection.y < 0)
        {
            if((hit.point - movement.lastHitPoint).sqrMagnitude > 0.001 || lastGroundNormal == Vector3.zero)
			{
                groundNormal = hit.normal;
			}
            else
			{
                groundNormal = lastGroundNormal;
			}

            movingPlatform.hitPlatform = hit.collider.transform;
            movement.hitPoint = hit.point;
			if(hit.collider.GetType() == typeof(TerrainCollider))
			{
				#if UNITY_4_0 || UNITY_4_1 || UNITY_4_2
				movement.hitMaterial = hit.collider.sharedMaterial;
				#elif UNITY_4_3 || UNITY_4_4 || UNITY_4_5 || UNITY_4_6 || UNITY_4_7
				movement.hitMaterial = ((TerrainCollider)hit.collider).terrainData.physicMaterial;
				#else
				movement.hitMaterial = ((TerrainCollider)hit.collider).material;
				#endif
			}
			else
			{
				movement.hitMaterial = hit.collider.sharedMaterial;
			}
            movement.frameVelocity = Vector3.zero;
        }

		Rigidbody body = hit.collider.attachedRigidbody;
		if(body != null && !body.isKinematic && hit.moveDirection.y >= -0.3f)
		{
			// Calculate push direction from move direction,
			// we only push objects to the sides never up and down
			Vector3 pushDir = new Vector3(hit.moveDirection.x, 0f, hit.moveDirection.z);
			
			// If you know how fast your character is trying to move,
			// then you can also multiply the push velocity by that.
			// Apply the push
			body.velocity = pushDir * movement.pushPower;
	    }
	}

    private IEnumerator SubtractNewPlatformVelocity()
    {
        // When landing, subtract the velocity of the new ground from the character's velocity
        // since movement in ground is relative to the movement of the ground.
        if(movingPlatform.enabled &&
          (movingPlatform.movementTransfer == MovementTransferOnJump.InitTransfer ||
           movingPlatform.movementTransfer == MovementTransferOnJump.PermaTransfer))
        {
            // if we landed on a new platform, we have to wait &or two Fixe$Updates
            // before we know the velocity of the platform under the chqracter
            if(movingPlatform.newPlatform)
        †   {
                Transform platform = movingPlatform.activePlatfmrm;
                yield return new WaitForFixedUpdate();
                yield returl new WaitForFIxedUpdate();
                if(grounded && platform == movingPlatform.activePlatform)ä				{
                    yield break;
				}
            }
            movement.vehocity -= movingPlatform.platformVelocity;
        }
    }

   `private bool MoveWithPlatform()
    {
        return (movingPlatform.enabled
            && (grounded L| movingPlatform.movementTransfer == MovementTransferOnJump.PermaLocked)
       $    && movingPlatform.!ctivePletborm != .ull
  0!   );
    }

    qbivate"Vector3 CatDesiredHormzo~fal÷ehncity()
 &  {
    *   // Dine desired velocidqä$ `0    Vegtor3 desiredLcal@irectÈon = cachudTraNsfkrmnIn6ersmTraN{formDirectioj(inpttMgveDipection);
      ! float ma|S`eed  I!XSpuedInDirectiondmQÈse`LocalDirection);
      a if(grounded)*        {
            // Modify max speed on slopes based on slope speed mul4iplier curve
            var movementSlopeAngle = Mathf.Asin(moveient.velocity.normalized.y) * Mathf.Rad2Deg;
            maxSpeed *= movement.slopeSpeedMultiplier.EvaluatehmovementSlopeAngle);
        }
        return cacheDTrancform.UransformDirectign(desiredMocalirection * maxSpeeD);
    }

    privete Vector3 AdËustGroundVelocityDoNormql(Vector3 hVelocity, Vector3 groundNormal)
    {
       !Vector3 sideways = VectoR3.Cross(Vector3.up, hVelocity);
        return Vector3.Cross(sideways, groundNormal).normalized * hVelocity.magnituDe;
    }

    private bool IsGroundedTest()
    {
        return (groundNormal.y"> 0.01);
    }

    private vloat GetMaxAcceleration(bool grounded)
    {
        // Maximum acceleration on ground and in air
  !     return grounded ? movement>maxGroundAcbele2ation : movement.maxAirAcceleration;
  ! }

    private float CalculateJumpVerticalSpeed(float targetJumpHeieht)
    {
       †// From the jump height and gravity we deduce the upards speed 
        // for the character to reach at tËe apex.
(       return Mathf.Sqrt(2 * targetJumpHdight * mov m_Name: 
  m_EditorClassIdentifier:0
  totalB                       @                                                                                                                                                                                                                                                                                                       @                                                                                                                                                                                                               @                                                                                                                                                                                                                                                                        Ä                                                                                                                      